---
- name: Create Units directory
  file: path={{ playbook_dir }}/units state=directory
  tags:
    - configuration

- name: Gather fleet machines info
  get_coreos_machines:
  register: fleetctl_hosts
  tags:
    - configuration
    - coreos_registry
- name: Find registry host
  choose_registry_machine: IPS="{{ item['IPS'] }}" IDS="{{ item['IDS'] }}"
  register: m_registry_host
  with_items:
    - "{{ fleetctl_hosts['stdout'] }}"
  tags:
    - configuration
    - coreos_registry
  notify:
    - Write registry IP to coreos servers
    - Write registry IP locally

# Create dockerfile
- name: Create docker directory for registry
  file: path={{ playbook_dir }}/docker/docker-registry state=directory
  tags:
    - configuration
- name: Create Registry Dockerfile
  template: src=registry-dockerfile.j2 dest={{ playbook_dir }}/docker/docker-registry/Dockerfile
  tags:
    - configuration
- name: Copy extra files for Registry image
  copy: src={{ item }} dest={{ playbook_dir }}/docker/docker-registry/{{ item }}
  with_items:
    - "config.yml"
  tags:
    - configuration
- name: Build Registry image
  docker_image: docker_url="tcp://{{ registry_host }}:2375" path="{{ playbook_dir }}/docker/docker-registry" name="{{ registry_image_name }}" state="build"
  tags:
    - docker
    - docker_push

# Create unit
- name: Create Registry Units
  template: src="registry.service.j2" dest="{{ playbook_dir }}/units/registry.service"
  tags:
    - configuration
- name: Submit Registry units
  shell: "fleetctl submit {{ playbook_dir }}/units/{{ item }}"
  with_items:
    - "registry.service"
  tags:
    - fleet_submit
    - fleet_submit_registry
- name: Start Registry units
  shell: "fleetctl start {{ item }}"
  with_items:
    - "registry.service"
  tags:
    - fleet_start
    - fleet_start_registry

